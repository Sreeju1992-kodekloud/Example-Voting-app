name: Vote application workflow
on:
    workflow_dispatch: 
    push:
        branches: main
        paths: 
            - 'vote/**'
            - '.github/workflows/vote-ci.yml'

    pull_request:
      branches: main
      paths: 
            - 'vote/**'
            - '.github/workflows/vote-ci.yml'

permissions: 
    contents: read
    actions: write

jobs:
    build-and-test:
        runs-on: ubuntu-latest
        steps:
        - name: Checkout code
          uses: actions/checkout@v4
          
        - name: Setup python environment
          uses: actions/setup-python@v5
          with:
            python-version: '3.12.6'

        - name: Cache Dependencies
          uses: actions/cache@v4
          with:
            path: ~/.cache/pip
            key: ${{ runner.os }}-pip-${{ hashFiles('vote/requirements.txt') }}

        - name: Install Dependencies
          run: pip install -r vote/requirements.txt

        - name: Unit test
          run: pytest vote/tests -v

        - name: Run Code coverage test
          run: |
             pytest --cov=vote --cov-report xml --cov-report html vote/tests/

        - name: Upload coverage.xml as artifacts
          uses: actions/upload-artifact@v4
          with:
            name: coverage-xml
            path: coverage.xml

        - name: Upload html coverage report
          uses: actions/upload-artifact@v4
          with:
            name: coverage-html
            path: htmlcov/

        - name: SonarQube testing
          uses: sonarsource/sonarqube-scan-action@master
          env:
             SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
             SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          with:
             projectBaseDir: vote 

        - name: Check the Quality Gate status
          id: sonarqube-quality-gate-check
          uses: sonarsource/sonarqube-quality-gate-action@master
          timeout-minutes: 5
          env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          with:
            scanMetadataReportFile: vote/.scannerwork/report-task.txt
            pollingTimeoutSec: 300

    dockerbuild-and-deploy:
        needs: build-and-test
        uses: ./.github/workflows/dockerbuild-and-push.yml
        secrets:
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        with:
          app: voteapp
          context: 'vote'
          dockerfile: vote/Dockerfile



    

          

    

